// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: product.proto

package productservice

import (
	"context"

	"mall/product/mall/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductRequest = product.CreateProductRequest
	DeleteProductRequest = product.DeleteProductRequest
	Empty                = product.Empty
	GetProductRequest    = product.GetProductRequest
	ListProductsRequest  = product.ListProductsRequest
	ListProductsResponse = product.ListProductsResponse
	Product              = product.Product
	ProductBrief         = product.ProductBrief
	SearchRequest        = product.SearchRequest
	SearchResponse       = product.SearchResponse
	SuggestionsRequest   = product.SuggestionsRequest
	SuggestionsResponse  = product.SuggestionsResponse
	UpdateProductRequest = product.UpdateProductRequest

	ProductService interface {
		// 商品列表
		ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
		// 获取商品详情
		GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
		// 创建商品
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
		// 更新商品
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error)
		// 删除商品
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error)
		// 搜索提示词（联想词）
		SearchSuggestions(ctx context.Context, in *SuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error)
		// 搜索商品
		SearchProducts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

// 商品列表
func (m *defaultProductService) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.ListProducts(ctx, in, opts...)
}

// 获取商品详情
func (m *defaultProductService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

// 创建商品
func (m *defaultProductService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

// 更新商品
func (m *defaultProductService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

// 删除商品
func (m *defaultProductService) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

// 搜索提示词（联想词）
func (m *defaultProductService) SearchSuggestions(ctx context.Context, in *SuggestionsRequest, opts ...grpc.CallOption) (*SuggestionsResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.SearchSuggestions(ctx, in, opts...)
}

// 搜索商品
func (m *defaultProductService) SearchProducts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	client := product.NewProductServiceClient(m.cli.Conn())
	return client.SearchProducts(ctx, in, opts...)
}
