// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: product.proto

package productservice

import (
	"context"

	"mall/rpc/product/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductRequest = pb.CreateProductRequest
	DeleteProductRequest = pb.DeleteProductRequest
	Empty                = pb.Empty
	GetProductRequest    = pb.GetProductRequest
	ListProductsRequest  = pb.ListProductsRequest
	ListProductsResponse = pb.ListProductsResponse
	Product              = pb.Product
	UpdateProductRequest = pb.UpdateProductRequest

	ProductService interface {
		// 商品列表，分页查询
		ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
		// 获取单个商品详情
		GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
		// 创建商品
		CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error)
		// 更新商品
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error)
		// 删除商品
		DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultProductService struct {
		cli zrpc.Client
	}
)

func NewProductService(cli zrpc.Client) ProductService {
	return &defaultProductService{
		cli: cli,
	}
}

// 商品列表，分页查询
func (m *defaultProductService) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	client := pb.NewProductServiceClient(m.cli.Conn())
	return client.ListProducts(ctx, in, opts...)
}

// 获取单个商品详情
func (m *defaultProductService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	client := pb.NewProductServiceClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

// 创建商品
func (m *defaultProductService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*Product, error) {
	client := pb.NewProductServiceClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

// 更新商品
func (m *defaultProductService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewProductServiceClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}

// 删除商品
func (m *defaultProductService) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewProductServiceClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}
