// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: order.proto

package orderservice

import (
	"context"

	"mall/order/mall/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderRequest       = order.CreateOrderRequest
	CreateOrderResponse      = order.CreateOrderResponse
	Empty                    = order.Empty
	GetOrderRequest          = order.GetOrderRequest
	ListOrdersRequest        = order.ListOrdersRequest
	ListOrdersResponse       = order.ListOrdersResponse
	OrderInfo                = order.OrderInfo
	OrderItem                = order.OrderItem
	UpdateOrderStatusRequest = order.UpdateOrderStatusRequest

	OrderService interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderInfo, error)
		ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

func (m *defaultOrderService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderInfo, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrderService) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ListOrders(ctx, in, opts...)
}

func (m *defaultOrderService) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.UpdateOrderStatus(ctx, in, opts...)
}
